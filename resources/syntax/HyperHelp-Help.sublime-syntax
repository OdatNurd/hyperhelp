%YAML 1.2
---
name: Help
scope: text.hyperhelp.help
first_line_match: '^%hyperhelp'
hidden: true
variables:
  key_binding: '<[^> ]*>[^> ]?>?'
  block_markup: '^\s*(`{3,})(?![^`]*`)'
  block_markup_end: '^\s*(\1)\s*$'
  hyperlink: '(\|)([^|\* \x{00a0}][^|\* ]*)(\|)'
  anchor: '(\*)([^*\| \x{00a0}][^*\| ]*)(\*)'
  hidden_anchor: '(\*\|)([^\*\|\t \x{00a0}][^*\| ]*)(\|\*)'
  separator: '(?:\+?([=-])\1{3,}(\+|\|)?)|(?:\|\x{00a0})|(?:\x{00a0}\|)'
  author_header: '^(%)(hyperhelp)'
  header_keypair: '\b([a-z]+)(=)(")([^"]*)(")'
  expanded_header: '^{{anchor}}\s+(.*)\s{2,}(.*)'

contexts:
  main:
    - match: '{{author_header}}'
      captures:
        1: punctuation.definition.directive
        2: keyword.other.directive meta.directive
      push: header_keypairs
    - match: '{{expanded_header}}'
      captures:
        1: string.unquoted punctuation.anchor.begin
        2: string.unquoted meta.anchor
        3: string.unquoted punctuation.anchor.end
        4: storage.type.class meta.title
        5: variable.language meta.date
      set: body
    - match: ''
      set: body
  header_keypairs:
    - match: '{{header_keypair}}'
      captures:
        1: storage.type.class meta.key
        2: keyword.operator
        3: string.quoted.double
        4: string.quoted.double meta.value
        5: string.quoted.double
    - match: '\S'
      scope: invalid.illegal.hyperhelp.header
    - match: '$'
      set: main
  body:
    - match: '<\*\*'
      scope: punctuation.definition.comment.begin.help
      push:
        - meta_scope: comment.block.help
        - match: '(\*\*>)(\n)?'
          captures:
            1: punctuation.definition.comment.end.help
          pop: true
    - match: '{{key_binding}}'
      scope: variable.language meta.keybind
    - match: '{{block_markup}}(json).*$\n?'
      captures:
        0: meta.code-fence.definition.begin.json
        1: punctuation.definition.code-fence.begin.json
        2: constant.other.language-name
      embed: scope:source.json
      embed_scope: markup.raw.code-fence.json
      escape: '{{block_markup_end}}'
      escape_captures:
        0: meta.code-fence.definition.end.json
        1: punctuation.definition.code-fence.end.json
    - match: '{{block_markup}}(python|py).*$\n?'
      captures:
        0: meta.code-fence.definition.begin.python
        1: punctuation.definition.code-fence.begin.python
        2: constant.other.language-name
      embed: scope:source.python
      embed_scope: markup.raw.code-fence.python
      escape: '{{block_markup_end}}'
      escape_captures:
        0: meta.code-fence.definition.end.python
        1: punctuation.definition.code-fence.end.python
    - match: '{{block_markup}}(xml|plist).*$\n?'
      captures:
        0: meta.code-fence.definition.begin.xml
        1: punctuation.definition.code-fence.begin.xml
        2: constant.other.language-name
      embed: scope:text.xml
      embed_scope: markup.raw.code-fence.xml
      escape: '{{block_markup_end}}'
      escape_captures:
        0: meta.code-fence.definition.end.xml
        1: punctuation.definition.code-fence.end.xml
    - match: '{{block_markup}}([\w-]*).*$\n?'
      captures:
        0: meta.code-fence.definition.begin
        1: punctuation.definition.code-fence.begin
        2: constant.other.language-name
      push:
        - meta_content_scope: markup.raw.code-fence
        - match: '{{block_markup_end}}'
          captures:
            0: meta.code-fence.definition.end
            1: punctuation.definition.code-fence.end
          pop: true
    - match: '`'
      scope: punctuation.definition.raw.begin
      push:
        - meta_content_scope: markup.raw.inline
        - match: '`'
          scope: punctuation.definition.raw.end
          pop: true
    - match: '{{hyperlink}}'
      captures:
        1: storage punctuation.link.begin
        2: storage meta.link
        3: storage punctuation.link.end
    - match: '{{anchor}}'
      captures:
        1: string.unquoted punctuation.anchor.begin
        2: string.unquoted meta.anchor
        3: string.unquoted punctuation.anchor.end
    - match: '{{hidden_anchor}}'
      captures:
        1: string.unquoted punctuation.anchor.hidden.begin
        2: string.unquoted meta.anchor.hidden
        3: string.unquoted punctuation.anchor.hidden.end
    - match: '{{separator}}'
      scope: storage.what meta.separator
